#
# /etc/nsm/securityonion.conf
#
# Generated by Chef for <%= node[:fqdn] %>
#


# Which IDS engine would you like to run?
ENGINE="<%= node[:seconion][:ids_engine] %>"

# How many days would you like to keep in the Sguil database archive?
DAYSTOKEEP="<%= node[:seconion][:days_to_keep] %>"

# How many days worth of tables would you like to repair every day?
DAYSTOREPAIR="<%= node[:seconion][:days_to_repair] %>"

# At what percentage of disk usage should the NSM scripts warn you?
WARN_DISK_USAGE="<%= node[:seconion][:warn_disk_usage] %>"

# At what percentage of disk usage should the NSM scripts begin purging old data?
CRIT_DISK_USAGE="<%= node[:seconion][:crit_disk_usage] %>"

# Do you want to run Bro?  yes/no
BRO_ENABLED="<%= node[:seconion][:bro_enabled] %>"

# BRO_USER specifies the user account used to start Bro.
BRO_USER="<%= node[:seconion][:bro_user] %>"
BRO_GROUP="<%= node[:seconion][:bro_group] %>"

# The OSSEC agent sends OSSEC HIDS alerts into the Sguil database.
# Do you want to run the OSSEC Agent?  yes/no
OSSEC_AGENT_ENABLED="<%= node[:seconion][:ossec_agent_enabled] %>"

# OSSEC_AGENT_LEVEL specifies the level at which OSSEC alerts are sent to sguild.
OSSEC_AGENT_LEVEL="<%= node[:seconion][:ossec_agent_level] %>"

# Xplico is no longer included in Security Onion
XPLICO_ENABLED="<%= node[:seconion][:xplico_enabled] %>"

# LOCAL_HIDS_RULE_TUNING
# If set to no (default), this node will copy OSSEC rules from master server as-is (no changes).
# If set to yes, this node will keep its own copy of the OSSEC rules.
LOCAL_HIDS_RULE_TUNING="<%= node[:seconion][:local_hids_rule_tuning] %>"

# LOCAL_NIDS_RULE_TUNING
# The effect of this option is different depending on whether this box is a server or not.
# SERVER
# LOCAL_NIDS_RULE_TUNING=yes
# rule-update will operate on a local copy of the rules instead of downloading rules from the Internet
# LOCAL_NIDS_RULE_TUNING=no
# rule-update will try to download rules from the Internet
# SENSOR-ONLY
# LOCAL_NIDS_RULE_TUNING=yes
# rule-update will copy rules from master server and then try to run PulledPork locally for tuning
# LOCAL_NIDS_RULE_TUNING=no
# rule-update will copy rules from master server as-is (no changes)
<% if node[:recipes].include?('seconion::server') %>
LOCAL_NIDS_RULE_TUNING="<%= node[:seconion][:local_nids_rule_tuning] %>"
<% else %>
LOCAL_NIDS_RULE_TUNING="<%= node[:seconion][:local_nids_rule_tuning] %>"
<% end %>


# OSSEC_AGENT_USER specifies the user account used to start the OSSEC agent for Sguil.
OSSEC_AGENT_USER="<%= node[:seconion][:ossec_agent_user] %>"

# Log size limit (GB) for Elasticsearch logs
LOG_SIZE_LIMIT="<%= node[:seconion][:log_size_limit] %>"

# Docker options
DOCKERNET="<%= node[:seconion][:dockernet] %>"
DOCKER_BRIDGE="<%= node[:seconion][:docker_bridge] %>"

# Elasticsearch options
ELASTICSEARCH_ENABLED="<%= node[:seconion][:elasticsearch_enabled] %>"
ELASTICSEARCH_HOST="<%= node[:seconion][:elasticsearch_host] %>"
ELASTICSEARCH_PORT="<%= node[:seconion][:elasticsearch_port] %>"
ELASTICSEARCH_PUBLISH_IP="<%= node[:seconion][:elasticsearch_publish_ip] %>"
ELASTICSEARCH_OPTIONS="<%= node[:seconion][:elasticsearch_options] %>"

# Logstash options
LOGSTASH_ENABLED="<%= node[:seconion][:logstash_enabled] %>"
LOGSTASH_HOST="<%= node[:seconion][:logstash_host] %>"
LOGSTASH_PORT="<%= node[:seconion][:logstash_port] %>"
LOGSTASH_PUBLISH_IP="<%= node[:seconion][:logstash_publish_ip] %>"
LOGSTASH_INPUT_REDIS="<%= node[:seconion][:logstash_input_redis] %>"
LOGSTASH_OUTPUT_REDIS="<%= node[:seconion][:logstash_output_redis] %>"
LOGSTASH_OPTIONS="<%= node[:seconion][:logstash_options] %>"

# Kibana options
KIBANA_ENABLED="<%= node[:seconion][:kibana_enabled] %>"
KIBANA_DARK_THEME="<%= node[:seconion][:kibana_dark_theme] %>"
KIBANA_INDEX="<%= node[:seconion][:kibana_index] %>"
KIBANA_VERSION="<%= node[:seconion][:kibana_version] %>"
KIBANA_DEFAULTAPPID="<%= node[:seconion][:kibana_defaultappid] %>"
KIBANA_OPTIONS="<%= node[:seconion][:kibana_options] %>"

# ElastAlert options
ELASTALERT_ENABLED="<%= node[:seconion][:elastalert_enabled] %>"
ELASTALERT_INDEX="<%= node[:seconion][:elastalert_index] %>"
ELASTALERT_OPTIONS="<%= node[:seconion][:elastalert_options] %>"

# Curator options
CURATOR_ENABLED="<%= node[:seconion][:curator_enabled] %>"
CURATOR_CLOSE_DAYS="<%= node[:seconion][:curator_close_days] %>"
CURATOR_OPTIONS="<%= node[:seconion][:curator_options] %>"

# Freq_server default options
FREQ_SERVER_ENABLED="<%= node[:seconion][:freq_server_enabled] %>"
FREQ_SERVER_OPTIONS="<%= node[:seconion][:freq_server_options] %>"

# Domain_stats options
DOMAIN_STATS_ENABLED="<%= node[:seconion][:domain_stats_enabled] %>"
DOMAIN_STATS_OPTIONS="<%= node[:seconion][:domain_stats_options] %>"

# What is the maximum number of uncategorized events to allow?
# If this number gets too high, then sguild startup may be delayed.
UNCAT_MAX="<%= node[:seconion][:uncat_max] %>"


