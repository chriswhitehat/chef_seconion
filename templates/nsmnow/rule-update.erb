#!/bin/bash
#
# Copyright (C) 2008-2016 Doug Burks and Security Onion <doug.burks@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#########################################
# Got r00t?
#########################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "rule-update needs root privileges.  Please try again using sudo."
    exit
fi

# Log file path
LOG="/var/log/nsm/pulledpork.log"

function update(){

#########################################
# Variables
#########################################

# How many days of rule backups do you want to keep?
DAYSTOKEEP_RULE_BACKUPS=30

# What user account should be used to execute pulledpork?
PULLEDPORK_USER=sguil

# What group should be given permissions to the pulledpork output?
PULLEDPORK_GROUP=sguil

# The values above can be overridden in securityonion.conf
source /etc/nsm/securityonion.conf

# Current date
date


#########################################
# NIDS Variables and Backups
#########################################

# NIDS rules
NIDS="/etc/nsm/rules/"
NIDS_RULES_DOWNLOADED=$NIDS/downloaded.rules
NIDS_RULES_LOCAL=$NIDS/local.rules

# Create backup directory if it doesn't already exist
NIDS_RULES_BACK=$NIDS/backup
mkdir -p $NIDS_RULES_BACK

# Backup downloaded.rules and remove old backups
echo "Backing up current downloaded.rules file before it gets overwritten."
cp $NIDS_RULES_DOWNLOADED $NIDS_RULES_BACK/downloaded.rules.`date +%Y%m%d%H%M%S`
echo "Cleaning up downloaded.rules backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
find $NIDS_RULES_BACK/downloaded.rules.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +

# Backup local.rules and remove old backups
echo "Backing up current local.rules file before it gets overwritten."
cp $NIDS_RULES_LOCAL $NIDS_RULES_BACK/local.rules.`date +%Y%m%d%H%M%S`
echo "Cleaning up local.rules backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
find $NIDS_RULES_BACK/local.rules.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +

# Create snort_dynamicrules and snort_dynamicrules_backup directories if they don't already exist
mkdir -p /usr/local/lib/snort_dynamicrules/
mkdir -p /usr/local/lib/snort_dynamicrules_backup/

# Set permissions to allow PULLEDPORK_USER to write rules
chown -R $PULLEDPORK_USER:$PULLEDPORK_GROUP /etc/nsm/rules
chown -R $PULLEDPORK_USER:$PULLEDPORK_GROUP /usr/local/lib/snort_dynamicrules/
mkdir -p /var/log/nsm/
touch /var/log/nsm/sid_changes.log
chown $PULLEDPORK_USER:$PULLEDPORK_GROUP /var/log/nsm/sid_changes.log
if ls /tmp/emerging.rules.tar.gz >/dev/null 2>&1; then chown $PULLEDPORK_USER:$PULLEDPORK_GROUP /tmp/emerging.rules.tar.gz*; fi
if ls /tmp/snortrules-snapshot-*.tar.gz >/dev/null 2>&1; then chown $PULLEDPORK_USER:$PULLEDPORK_GROUP /tmp/snortrules-snapshot-*.tar.gz*; fi

# Create home dir for $PULLEDPORK_USER and set permissions
mkdir -p /home/$PULLEDPORK_USER
chown -R $PULLEDPORK_USER /home/$PULLEDPORK_USER

#########################################
# Is this box a master or slave?
#########################################

# Slave sensors have securityonion_ssh.conf
SSH_DIR="/root/.ssh"


# Default to no PulledPork options
PP_OPTIONS=""

# OPTION: -T if the user is running Suricata
if [ "$ENGINE" = "suricata" ]; then
        PP_OPTIONS="$PP_OPTIONS -T"
        echo "ENGINE=suricata, so we'll execute PulledPork with the -T option to avoid adding soid rules to downloaded.rules."
fi

# Get current snort version
SNORT_VERSION = snort --version 2>&1 >/dev/null | egrep -o "Version \S+" | cut -d ' ' -f 2
SNORT_VERSION_NO_DOTS = echo "$SNORT_VERSION" | tr -d '.'
SNORT_VERSION_MAJOR = echo "$SNORT_VERSION" | egrep -o "[0-9+]\.[0-9]+\.[0-9+]" 

mkdir -p /tmp/$SNORT_VERSION_MAJOR
mkdir -p /tmp/$SNORT_VERSION_NO_DOTS

# Go get rules from Internet.
echo "Running PulledPork."

while read version; do
  echo $version
done </etc/nsm/pulledpork/snort

wget "https://rules.emergingthreatspro.com/6449814281885661/snort-$SNORT_VERSION_MAJOR/etpro.rules.tar.gz" -O /tmp/$SNORT_VERSION_MAJOR/etpro.rules.tar.gz
wget "https://www.snort.org/reg-rules/snortrules-snapshot-$SNORT_VERSION_NO_DOTS.tar.gz/2cfd7a06675a81d35b29c0332a81b164066aa81d" -O /tmp/$SNORT_VERSION_NO_DOTS/snortrules-snapshot-$SNORT_VERSION_NO_DOTS.tar.gz

/usr/bin/pulledpork.pl -P -n $PP_OPTIONS -c /etc/nsm/pulledpork/pulledpork.conf |
        grep -v "normalizations disabled because not inline" |grep -v "^$"



#########################################
# Restart NIDS processes
#########################################

# If Barnyard is enabled, restart it
if grep -i 'BARNYARD2_ENABLED="yes"' /etc/nsm/*/sensor.conf >/dev/null 2>&1; then
        if pgrep barnyard2 >/dev/null 2>&1; then
                echo "Restarting Barnyard2."
                /usr/sbin/nsm_sensor_ps-restart --only-barnyard2
        fi
fi

# If the IDS Engine is enabled, restart it
if grep -i 'IDS_ENGINE_ENABLED="yes"' /etc/nsm/*/sensor.conf >/dev/null 2>&1; then
        # We're about to use pgrep to search for the $ENGINE process (snort or suricata).
        # "pgrep suricata" won't work since the process shows up as Suricata,
        # so do "pgrep Suricata" instead.
        [ "$ENGINE" == "suricata" ] && ENGINE="Suricata"
        if pgrep $ENGINE >/dev/null 2>&1; then
                echo "Restarting IDS Engine."
                /usr/sbin/nsm_sensor_ps-restart --only-snort-alert
        fi
fi
}
update 2>&1 | tee -a $LOG
