#
# /etc/nsm/securityonion.conf
#
# Generated by Chef for <%= node[:fqdn] %>
#

##############################
# Global Attributes
##############################

# At what percentage of disk usage should the NSM scripts warn you?
WARN_DISK_USAGE=<%= node[:seconion][:sensor][:warn_disk_usage] %>

# At what percentage of disk usage should the NSM scripts begin purging old data?
CRIT_DISK_USAGE=<%= node[:seconion][:sensor][:crit_disk_usage] %>

# LOCAL_NIDS_RULE_TUNING
# The effect of this option is different depending on whether this box is a server or not.
# SERVER
# LOCAL_NIDS_RULE_TUNING=yes
# rule-update will operate on a local copy of the rules instead of downloading rules from the Internet
# LOCAL_NIDS_RULE_TUNING=no
# rule-update will try to download rules from the Internet
# SENSOR-ONLY
# LOCAL_NIDS_RULE_TUNING=yes
# rule-update will copy rules from master server and then try to run PulledPork locally for tuning
# LOCAL_NIDS_RULE_TUNING=no
# rule-update will copy rules from master server as-is (no changes)
<% if node[:recipes].include?('seconion::server') %>
LOCAL_NIDS_RULE_TUNING=<%= node[:seconion][:server][:local_nids_rule_tuning] %>
<% else %>
LOCAL_NIDS_RULE_TUNING=<%= node[:seconion][:sensor][:local_nids_rule_tuning] %>
<% end %>


##############################
# Server Attributes
##############################

# How many days would you like to keep in the Sguil database archive?
DAYSTOKEEP=<%= node[:seconion][:server][:days_to_keep] %>

# How many days worth of tables would you like to repair every day?
DAYSTOREPAIR=<%= node[:seconion][:server][:days_to_repair] %>


# What is the maximum number of uncategorized events to allow?
# If this number gets too high, then sguild startup may be delayed.
UNCAT_MAX=<%= node[:seconion][:server][:uncat_max] %>


##############################
# Sensor Attributes
##############################

# Which IDS engine would you like to run?
ENGINE=<%= node[:seconion][:sensor][:ids_engine] %>

# Do you want to run Bro?  yes/no
BRO_ENABLED=<%= node[:seconion][:sensor][:bro_enabled] %>

# BRO_USER specifies the user account used to start Bro.
BRO_USER=<%= node[:seconion][:sensor][:bro_user] %>
BRO_GROUP=<%= node[:seconion][:sensor][:bro_group] %>


##############################
# Chef: Unsupported features
##############################

# OSSEC_AGENT_USER specifies the user account used to start the OSSEC agent for Sguil.
OSSEC_AGENT_USER=sguil
# OSSEC_AGENT_LEVEL specifies the level at which OSSEC alerts are sent to sguild.
OSSEC_AGENT_LEVEL=5

# LOCAL_HIDS_RULE_TUNING
# If set to no (default), sensor will copy OSSEC rules from master server as-is (no changes).
# If set to yes, sensor will keep its own copy of the OSSEC rules.
LOCAL_HIDS_RULE_TUNING=no

# The OSSEC agent sends OSSEC HIDS alerts into the Sguil database.
# Do you want to run the OSSEC Agent?  yes/no
OSSEC_AGENT_ENABLED=no

# Do you want to run the Snorby worker?  yes/no
SNORBY_ENABLED=no

# Do you want to run Xplico?  yes/no
XPLICO_ENABLED=no

# ELSA
ELSA=NO

